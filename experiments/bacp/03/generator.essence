language Essence 1.3

given n_courses_min: int(1..50)
given n_courses_max: int(1..50)
find n_courses: int(1..50)
such that
    n_courses >= n_courses_min,
    n_courses <= n_courses_max
given n_periods_min: int(1..50)
given n_periods_max: int(1..50)
find n_periods: int(1..50)
such that
    n_periods >= n_periods_min,
    n_periods <= n_periods_max
given load_per_period_lb_min: int(1..50)
given load_per_period_lb_max: int(1..50)
find load_per_period_lb: int(1..50)
such that
    load_per_period_lb >= load_per_period_lb_min,
    load_per_period_lb <= load_per_period_lb_max
given load_per_period_ub_min: int(1..50)
given load_per_period_ub_max: int(1..50)
find load_per_period_ub: int(1..50)
such that
    load_per_period_ub >= load_per_period_ub_min,
    load_per_period_ub <= load_per_period_ub_max
given courses_per_period_lb_min: int(1..50)
given courses_per_period_lb_max: int(1..50)
find courses_per_period_lb: int(1..50)
such that
    courses_per_period_lb >= courses_per_period_lb_min,
    courses_per_period_lb <= courses_per_period_lb_max
given courses_per_period_ub_min: int(1..50)
given courses_per_period_ub_max: int(1..50)
find courses_per_period_ub: int(1..50)
such that
    courses_per_period_ub >= courses_per_period_ub_min,
    courses_per_period_ub <= courses_per_period_ub_max
given prerequisite_cardMin: int(1..50)
given prerequisite_cardMax: int(1..50)
given prerequisite_relation1_min: int(1..50)
given prerequisite_relation1_max: int(1..50)
given prerequisite_relation2_min: int(1..50)
given prerequisite_relation2_max: int(1..50)
find prerequisite: relation (maxSize 50) of (int(1..50) * int(1..50))
such that
    |prerequisite| >= prerequisite_cardMin /\ |prerequisite| <= prerequisite_cardMax,
    |prerequisite| <= n_courses,
    and([q1[1] >= prerequisite_relation1_min | q1 <- prerequisite]),
    and([q1[1] <= prerequisite_relation1_max | q1 <- prerequisite]),
    and([q1[1] <= n_courses | q1 <- prerequisite]),
    and([q1[2] >= prerequisite_relation2_min | q1 <- prerequisite]),
    and([q1[2] <= prerequisite_relation2_max | q1 <- prerequisite]),
    and([q1[2] <= n_courses | q1 <- prerequisite])
given course_load_range_min: int(1..50)
given course_load_range_max: int(1..50)
find course_load: function int(1..50) --> int(1..50)
such that
    and([q2 >= 1 /\ q2 <= n_courses <-> q2 in defined(course_load) | q2 : int(1..50)]),
    and([q2[2] >= course_load_range_min | q2 <- course_load]),
    and([q2[2] <= course_load_range_max | q2 <- course_load])
such that load_per_period_lb < load_per_period_ub
such that courses_per_period_lb < courses_per_period_ub
such that and([course_load(course) <= load_per_period_ub | course : int(1..50), course <= n_courses])

such that
    and([sum([course_load(c) | c : int(1..50), c <= n_courses]) >= n_periods * load_per_period_lb | course : int(1..50), course <= n_courses])

such that
    and([sum([course_load(c) | c : int(1..50), c <= n_courses]) <= n_periods * load_per_period_ub | course : int(1..50), course <= n_courses])

such that n_courses >= n_periods * courses_per_period_lb
such that n_courses <= n_periods * courses_per_period_ub
such that |prerequisite| > 0
such that and([a != b | (a, b) <- toSet(prerequisite)])

find level : function (total) int(1..n_courses_max) --> int(1..3) 
such that forAll (a,b) in toSet(prerequisite) . level(a) < level(b)
